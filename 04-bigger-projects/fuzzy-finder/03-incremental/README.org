#+TITLE: Incremental Fuzzy Finder

The problem with the functional fuzzy finder we built in section 2 is
that it's slow.  The reason for that is simple enough: the style of
the implementation we used essentially required us to rerun the filter
on the entire input every time we redisplayed.

This is obviously silly, and among other things, it means that even
when nothing is happening, the application is still using a bunch of
CPU, since it's continuing to refresh ten times a second.

We could make this a little better with some simple changes to avoid
recomputing when nothing has happened, but that isn't enough. That's
because the process of reading in data would still be slow, since we'd
rerun the filter on every line on every render during the period where
we're reading in more data.

Instead, we're going to try to build a more truly incremnental
version, that in particular can do the necssary incrementally as
inputs are added.  We're going to use the Incremental ilbrary to allow
us to do this while keeping things in a simple, functional style.

* How to use Incremental

The core of incremental is a little language of combinators which,
combined with syntactic sugar, allows you to structure your
computation as a graph.

You initialize Incremental by running a functor to create an instance
of Incremental (there's mutable state that stores the computation
graph, so we don't necessarily want to share across applications), and
open the ~Let_syntax~ module which gives us both some infix operators
as well as the ability to use some specialized syntax extensions.

#+BEGIN_SRC ocaml
module Incr = Incremental_lib.Incremental.Make ()
open Incr.Let_syntax
#+END_SRC

Inputs to an incremental computation are called variables, and they
can be created as follows.

#+BEGIN_SRC ocaml
let x_v = Incr.Var.create 10
let y_v = Incr.Var.create 100
let z_v = Incr.Var.create 3
#+END_SRC

We can then create ordinary ~Incr.t~ nodes by using ~Incr.Var.watch~.

#+BEGIN_SRC ocaml
let x = Incr.Var.watch x_v
let y = Incr.Var.watch y_v
let z = Incr.Var.watch z_v
#+END_SRC

Now we can build a little computation out of this, say, by adding
the numbers together.

#+BEGIN_SRC ocaml
let m = Incr.map2 ~f:(+) x (Incr.map2 ~f:(+) y z)
#+END_SRC

This basically builds up a little computation tree, that looks
something like this:

#+BEGIN_EXAMPLE
   +
  / \
 x  +
   / \
  y   z
#+END_EXAMPLE

We can get the value out of this computation by ~observing~ an
incremental node, and then calling ~stabilize~ to run the computation.

#+BEGIN_SRC ocaml
let m_o = Incr.observe m
let () =
  Incr.stabilize ();
  printf "%d\n" (Incr.Observer.value_exn m_o)
#+END_SRC

The point of this is that if some of the inputs are changed, only the
relevant subset of the graph needs to be refired.  So, we can write:

#+BEGIN_SRC ocaml
let () =
  Incr.Var.set x_v 8;
  Incr.stabilize ();
  printf "%d\n" (Incr.Observer.value_exn m_o)
#+END_SRC

And ~m_o~ is updated without having to recompute the sum of ~y~ and ~z~.

* Prettier syntax with ~Let_syntax~

We can use ~Let_syntax~ to make some of these things easier to
read. Instead of this:

#+BEGIN_SRC ocaml
Incr.map2 <expr1> <expr2> ~f:(fun x y -> <expr3>)
#+END_SRC

We can write:

#+BEGIN_SRC ocaml
let%map x = <expr1> and y = <expr2> in <expr3>
#+END_SRC

This is often a clearer syntax, and it's recommended as the default.

* Bigger computations with ~Incr_map~

Incremental maps work great if your optimizations can be easily
expressed by laying out a static computation graph, and then only
refiring a subset of the graph.  But one case that this doesn't work
so well for is if you have one big data structure that you'd like to
analyze incrementally.

If that data structure is a map, then you can use ~Incr_map~, which
has incremental computations that work efficiently on maps, by taking
advantage under the covers of the fact that maps can be diffed
efficiently.  We can set it up as follows.

#+BEGIN_SRC ocaml
module Incr_map = Incr_map.Make (Incr)
#+END_SRC

Here's an example of a function that takes a map with integers as
data, and filters down to just the positve elements.

#+BEGIN_SRC ocaml
let positive_entries map =
  Incr_map.filter_mapi map ~f:(fun ~key:_ ~data ->
      if data > 0 then Some data else None)
#+END_SRC

As the input map changes, this code will only have to do work
proportional to the number of additions and deletions from the map,
rather than having to recompute the entire transformation.

* Dynamic computations with bind

Another useful operator is ~Incr.bind~.  The key way that bind is
different from map is that the right-hand-side of the bind can itself
contain an incremental computation. This means that every time the
bind fires, you can create a new incremental computation.

This is very useful if you want to create a filtered map where the
filter can change dynamically.  Here's an example.

#+BEGIN_SRC ocaml
let changing_filter test map =
  let%bind test = test in
  Incr_map.filter_mapi map ~f:(fun ~key:_ ~data ->
      if test data then Some data else None)
#+END_SRC

The function defined above takes two arguments, both incremental. When
~map~ changes on its own, then the changes are processed
incrementally.  When ~test~ changes, ~Incr_map.filter_mapi~ is re-run,
which means the whole computation is done from scratch, with the new
test function.

We can still do this if both the map and the test function start out
in a single data structure. Here's an example.

#+BEGIN_SRC ocaml
module Data = struct
  type t = { test : int -> bool
           ; map : int Map.M(String).t
           } [@@deriving fields]
end

let filter t =
  let map = t >>| Data.map in
  let%bind test = t >>| Data.test in
  Incr_map.filter_mapi map ~f:(fun ~key:_ ~data ->
      if test data then Some data else None)
#+END_SRC

Note that we use ~>>|~, which is an infix version of the ~Incr.map~
operator.  This allows us to concisely project out fields from the
overall record.  Note that it's important to do that, rather than just
binding on ~t~ itself, as follows:

#+BEGIN_SRC ocaml
let filter t =
  let map = t >>| Data.map in
  let%bind t = t in
  let test = t.test in
  Incr_map.filter_mapi map ~f:(fun ~key:_ ~data ->
      if test data then Some data else None)
#+END_SRC

The above code is not incremental at all, since every time ~t~
changes, everything after the bind is redone, and ~t~ changes every
time either ~map~ or ~test~ changes.

* Fixing the fuzzy finder

The fuzzy finder as it works right now uses incremental types, but
doesn't really perform any better. That's because the key function,
~Fuzzy.Model.widget_and_selected~ recomputes everything every time
either the clock ticks or anything about the model changes. (the clock
is used for the spinner)

Your goal is to use the functionality described above to refine the
incremental calculation, making the filtering incremental, and not
recomputing everything anytime one indivdiual piece changes, like the
clock.
