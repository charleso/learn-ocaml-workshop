#+TITLE: Write A Fuzzy Finder

Recently many of us at Jane Street have taken a liking to [[https://github.com/junegunn/fzf][fzf]]. This
utility makes it quick and easy for users to make a selection in a
terminal pipeline, or as part of a shell script.

E.g.
#+BEGIN_EXAMPLE
  echo -e "blue pill\nred pill" | fzf
#+END_EXAMPLE

will present the user in their terminal with the choice between a "red
pill" and "blue pill". The user can type in characters to narrow the
selection, and hit the Enter key, at which point the selection will be
sent to fzf's stdout.

This is actually very useful, e.g.

#+BEGIN_EXAMPLE
  function qless(){ less $(ls -1 | fzf); }
#+END_EXAMPLE

which allows one to type ~qless<RET>~ and then choose something in
this directory to run less on.

* How a fuzzy finder works

Have you ever considered how ~less~ can read from standard in, but
also read PgUp/PgDwn inputs? Have you ever done something like the
below?

#+BEGIN_EXAMPLE
  tail ${FILE} | vim - | sed 's/hello/goodbye/g'
#+END_EXAMPLE

In these cases, the terminal can still be controlled by the user, but
stdin/stdout are being redirected by the shell to other programs; so
it's not possible for the keyboard input and terminal output to go to
stdin/stdout.

Instead, in these cases, the device ~/dev/tty~ is used for reading and
writing directly to the terminal. So, fuzzy finding utilities should
have two sets of inputs, and two sets of outputs:

- Inputs : stdin, read from ~/dev/tty~
- Outputs: stdout, write to ~/dev/tty~

* Structure of the tutorial

There are three directories, each containing different stages.

- ~01-simple~ is a warm-up. It contains a simple stubbed out
  command-line program, whose only purpose is to read in and filter a
  sequence of lines. You need to figure out how to use the ~Re~
  regular expression library to do your filtering.

- ~02-functional~ contains a skeleton for a fuzzy finder, but right
  now, the fuzzy finder is missing all of the finding
  functionality. Your goal is to put that functionality in.

- ~03-incremental~ is about performance. The fuzzy finder we build in
  the previous section is decent for small inputs, but starts falling
  apart as you get to bigger inputs. That's because the style of that
  implementation leads you to redo the full computation over and over.
  In this exercise, you'll use Incremental to speed that up.

There are also some other important directories.

- ~tty_text~ contains a small TTY library, built for this
  example. Some extensions can be done by extending this library.

- ~solutions~ contains reasonable solutions to the functional and
  imperative sections, though they're hardly complete. In any case, if
  you get stumped, you might want to take a look at htem to see how we
  solved the problems.
