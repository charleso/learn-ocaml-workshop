#+TITLE: Write A Fuzzy Finder

Recently many of us at Jane Street have taken a liking to [[https://github.com/junegunn/fzf][fzf]]. This
utility makes it quick and easy for users to make a selection in a
terminal pipeline, or as part of a shell script.

E.g.
#+BEGIN_EXAMPLE
  echo -e "blue pill\nred pill" | fzf
#+END_EXAMPLE

will present the user in their terminal with the choice between a "red
pill" and "blue pill". The user can type in characters to narrow the
selection, and hit the Enter key, at which point the selection will be
sent to fzf's stdout.

This is actually very useful, e.g.

#+BEGIN_EXAMPLE
  function qless(){ less $(ls -1 | fzf); }
#+END_EXAMPLE

which allows one to type ~qless<RET>~ and then choose something in
this directory to run less on.

* How a fuzzy finder works

Have you ever considered how ~less~ can read from standard in, but
also read PgUp/PgDwn inputs? Have you ever done something like the
below?

#+BEGIN_EXAMPLE
  tail ${FILE} | vim - | sed 's/hello/goodbye/g'
#+END_EXAMPLE

In these cases, the terminal can still be controlled by the user, but
stdin/stdout are being redirected by the shell to other programs; so
it's not possible for the keyboard input and terminal output to go to
stdin/stdout.

Instead, in these cases, the device ~/dev/tty~ is used for reading and
writing directly to the terminal. So, fuzzy finding utilities should
have two sets of inputs, and two sets of outputs:

- Inputs : stdin, read from ~/dev/tty~
- Outputs: stdout, write to ~/dev/tty~

* Tasks
** How will line editing work?

The user input is there for you to consume, but there's no actual line
editor provided.

** How you are going to store the data, filtered items, and user input?

There are no data structures defined, that's up to you.

** How will the user input match what comes from stdin?

A simple check if the input string is present in any of the input is
probably reasonable to start with

Here are some example commands that you may find useful for testing
your finder:

#+BEGIN_EXAMPLE
  seq 0 10000 | ./_build/default/fuzzy.exe
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  seq 0 7 100000 | ./_build/default/fuzzy.exe
#+END_EXAMPLE

** Add colors
The [[https://en.wikipedia.org/wiki/ANSI_escape_code][Wikipedia]] article on ANSI escape codes explains how to color
things. This would allow you to highlight the current selection, for
example.

** Process arrow keys

The Tty_text module provides up-arrow and down-arrow keys. Can you use
those for selecting something other than the first match?

** Add more diagnostic info

Add output for
- How many items the program knows about
- How many items match the current search

** Fuzzier finding

Instead of just looking for a substring, consider having a match be
any string that has the typed strings in some order.

** Output sorting

Try to come up with a good way to sort the output. Is lexicographic
string comparison enough?
